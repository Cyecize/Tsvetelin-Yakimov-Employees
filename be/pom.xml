<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.cyecize</groupId>
    <artifactId>employees</artifactId>
    <version>1.0</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>

        <plugins>
            <!-- Following 2 plugins can be used to build a self executable jar.
            After the build, just run java -jar outputName.jar -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Build an executable JAR -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>com.cyecize.app.StartUp</mainClass>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                        <manifestEntries>
                            <!--                            <Class-Path>lib/summer-1.3.jar lib/javache-embedded-1.3.jar</Class-Path>-->
                            <Class-Path>lib/summer-1.3.jar lib/javache-embedded-1.3.jar</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <!-- Following 2 plugins can be used to build a jar file in the correct format for the standalone server.
             After the build, just place the jar file into the webapps folder of javache.
              The file name may need to be renamed to ROOT.jar -->

<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-dependency-plugin</artifactId>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>copy-dependencies</id>-->
<!--                        <phase>prepare-package</phase>-->
<!--                        <goals>-->
<!--                            <goal>copy-dependencies</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <outputDirectory>${project.build.directory}/classes/lib</outputDirectory>-->
<!--                            <overWriteReleases>false</overWriteReleases>-->
<!--                            <overWriteSnapshots>false</overWriteSnapshots>-->
<!--                            <overWriteIfNewer>true</overWriteIfNewer>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-antrun-plugin</artifactId>-->
<!--                <version>3.1.0</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>Prepare-For-Jar</id>-->
<!--                        <phase>compile</phase>-->
<!--                        <goals>-->
<!--                            <goal>run</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <target name="Prepare classes folder for custom jar file">-->
<!--                                <copy encoding="${project.build.sourceEncoding}"-->
<!--                                      outputencoding="${project.build.sourceEncoding}"-->
<!--                                      todir="${project.basedir}/target/temp/classes/">-->
<!--                                    <fileset dir="${project.basedir}/target/classes/"/>-->
<!--                                </copy>-->
<!--                                <delete dir="${project.basedir}/target/classes"/>-->

<!--                                <copy encoding="${project.build.sourceEncoding}"-->
<!--                                      outputencoding="${project.build.sourceEncoding}"-->
<!--                                      todir="${project.basedir}/target/classes/classes/">-->
<!--                                    <fileset dir="${project.basedir}/target/temp/classes/"/>-->
<!--                                </copy>-->
<!--                            </target>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                    <execution>-->
<!--                        <id>Restore-After-Jar</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>run</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <target name="Restore classes folder">-->
<!--                                <delete dir="${project.basedir}/target/classes/classes"/>-->
<!--                                <copy encoding="${project.build.sourceEncoding}"-->
<!--                                      outputencoding="${project.build.sourceEncoding}"-->
<!--                                      todir="${project.basedir}/target/classes/">-->
<!--                                    <fileset dir="${project.basedir}/target/temp/classes/"/>-->
<!--                                </copy>-->
<!--                                <delete dir="${project.basedir}/target/temp/"/>-->
<!--                            </target>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>com.cyecize</groupId>
            <artifactId>javache-embedded</artifactId>
            <version>1.3</version>
            <scope>system</scope>
            <systemPath>${basedir}/lib/javache-embedded-1.3.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.cyecize</groupId>
            <artifactId>summer</artifactId>
            <version>1.3</version>
            <scope>system</scope>
            <systemPath>${basedir}/lib/summer-1.3.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.26</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.4.0</version>
            <scope>test</scope>
        </dependency>

    </dependencies>
</project>